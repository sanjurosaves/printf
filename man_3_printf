.\" Manpage for _printf
.TH man 8 "26 February 2018" "1.0" "_printf man page"
.SH NAME
    _printf \- format and print data 
.SH SYNOPSIS
    _printf FORMAT [ARGUMENT]
    _printf OPTION
.SH DESCRIPTION
    The _printf utility formats and prints its arguments, after the first,  under control of the format. The format is a character string which contains three types of objects: plain characters, which are simply copied to standart output, character escape sequenc es which are converted and copied to the standart output, and format specifications, each of which causes printing og the next succ essiive argument.

    Print ARGUMENT(s) according to FORMAT, or execute according to OPTION.
    FORMAT controls  the output as in C _printf. Interpreted sequenses are:

    \\"     double quote

    \\\\     backslash

     %%     a single %

     Conversion specifiers
     A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:

     d, i   The int argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of digits that must appear; if the converted value requires f            ewer digits, it is padded on the left with zeros.  The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.

     c	    If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written.  If an l modifier is present, the wint_t (wide c		haracter) argument is converted to a multibyte sequence by a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting m            ultibyte string is written.

     s 	    If no l modifier is present: the const char * argument is  expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are 		writte  up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written.  If a precision is given, 	    no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.

     	    If an l modifier is present: the const wchar_t * argument is expected to be a pointer to an array of wide characters.  Wide characters from the array are converted to m		ultibyte characters (each by a call to the wcrtomb(3) function, with a conversion state starting in the initial state before the first wide character), up to and includ	    ing a terminating null wide character.  The resulting multibyte characters are written up to (but not including) the terminating null byte.  If a precision is specified            , no more bytes than the number specified are written, but no partial multibyte characters are written. Note that the precision determines the number of bytes written,             not the number of wide characters or screen positions. The array must contain a terminating null wide character, unless a precision is given and it is so small that the            number of bytes written exceeds it before the end of the array is reached.
.SH RETURN VALUE
    Upon successful return, these functions return the number of
    characters printed (excluding the null byte used to end output to
    strings).
.SH SEE ALSO
    printf 
.SH BUGS
    About to discover.
.SH AUTHOR
Written by: Alex Allen, Elena Serebryakova
